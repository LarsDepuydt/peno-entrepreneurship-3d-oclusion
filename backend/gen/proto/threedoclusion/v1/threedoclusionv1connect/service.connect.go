// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: threedoclusion/v1/service.proto

package threedoclusionv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/LarsDepuydt/peno-entrepreneurship-3d-oclusion/gen/proto/threedoclusion/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ScanServiceName is the fully-qualified name of the ScanService service.
	ScanServiceName = "threedoclusion.v1.ScanService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScanServiceSendMenuOptionProcedure is the fully-qualified name of the ScanService's
	// SendMenuOption RPC.
	ScanServiceSendMenuOptionProcedure = "/threedoclusion.v1.ScanService/SendMenuOption"
	// ScanServiceConnectionStatusUpdatesProcedure is the fully-qualified name of the ScanService's
	// ConnectionStatusUpdates RPC.
	ScanServiceConnectionStatusUpdatesProcedure = "/threedoclusion.v1.ScanService/ConnectionStatusUpdates"
	// ScanServiceSendVRProcedure is the fully-qualified name of the ScanService's SendVR RPC.
	ScanServiceSendVRProcedure = "/threedoclusion.v1.ScanService/SendVR"
	// ScanServiceWaitingProcedure is the fully-qualified name of the ScanService's Waiting RPC.
	ScanServiceWaitingProcedure = "/threedoclusion.v1.ScanService/Waiting"
	// ScanServiceAddScanProcedure is the fully-qualified name of the ScanService's AddScan RPC.
	ScanServiceAddScanProcedure = "/threedoclusion.v1.ScanService/AddScan"
	// ScanServiceDeleteScanProcedure is the fully-qualified name of the ScanService's DeleteScan RPC.
	ScanServiceDeleteScanProcedure = "/threedoclusion.v1.ScanService/DeleteScan"
	// ScanServiceGetAllScansProcedure is the fully-qualified name of the ScanService's GetAllScans RPC.
	ScanServiceGetAllScansProcedure = "/threedoclusion.v1.ScanService/GetAllScans"
	// ScanServiceGetScanByIDProcedure is the fully-qualified name of the ScanService's GetScanByID RPC.
	ScanServiceGetScanByIDProcedure = "/threedoclusion.v1.ScanService/GetScanByID"
	// ScanServiceGetScanByDateProcedure is the fully-qualified name of the ScanService's GetScanByDate
	// RPC.
	ScanServiceGetScanByDateProcedure = "/threedoclusion.v1.ScanService/GetScanByDate"
	// ScanServiceAddTagProcedure is the fully-qualified name of the ScanService's AddTag RPC.
	ScanServiceAddTagProcedure = "/threedoclusion.v1.ScanService/AddTag"
	// ScanServiceDeleteTagProcedure is the fully-qualified name of the ScanService's DeleteTag RPC.
	ScanServiceDeleteTagProcedure = "/threedoclusion.v1.ScanService/DeleteTag"
	// ScanServiceGetAllTagsProcedure is the fully-qualified name of the ScanService's GetAllTags RPC.
	ScanServiceGetAllTagsProcedure = "/threedoclusion.v1.ScanService/GetAllTags"
	// ScanServiceGetTagByIDProcedure is the fully-qualified name of the ScanService's GetTagByID RPC.
	ScanServiceGetTagByIDProcedure = "/threedoclusion.v1.ScanService/GetTagByID"
	// ScanServiceGetAllTagsByTypeProcedure is the fully-qualified name of the ScanService's
	// GetAllTagsByType RPC.
	ScanServiceGetAllTagsByTypeProcedure = "/threedoclusion.v1.ScanService/GetAllTagsByType"
	// ScanServiceSendPositionScanProcedure is the fully-qualified name of the ScanService's
	// SendPositionScan RPC.
	ScanServiceSendPositionScanProcedure = "/threedoclusion.v1.ScanService/SendPositionScan"
	// ScanServiceGetPositionScanProcedure is the fully-qualified name of the ScanService's
	// GetPositionScan RPC.
	ScanServiceGetPositionScanProcedure = "/threedoclusion.v1.ScanService/GetPositionScan"
	// ScanServiceAddPatientProcedure is the fully-qualified name of the ScanService's AddPatient RPC.
	ScanServiceAddPatientProcedure = "/threedoclusion.v1.ScanService/AddPatient"
	// ScanServiceDeletePatientProcedure is the fully-qualified name of the ScanService's DeletePatient
	// RPC.
	ScanServiceDeletePatientProcedure = "/threedoclusion.v1.ScanService/DeletePatient"
	// ScanServiceGetAllPatientsProcedure is the fully-qualified name of the ScanService's
	// GetAllPatients RPC.
	ScanServiceGetAllPatientsProcedure = "/threedoclusion.v1.ScanService/GetAllPatients"
	// ScanServiceGetPatientByIDProcedure is the fully-qualified name of the ScanService's
	// GetPatientByID RPC.
	ScanServiceGetPatientByIDProcedure = "/threedoclusion.v1.ScanService/GetPatientByID"
	// ScanServiceGetPatientByNameProcedure is the fully-qualified name of the ScanService's
	// GetPatientByName RPC.
	ScanServiceGetPatientByNameProcedure = "/threedoclusion.v1.ScanService/GetPatientByName"
	// ScanServiceAddDentistProcedure is the fully-qualified name of the ScanService's AddDentist RPC.
	ScanServiceAddDentistProcedure = "/threedoclusion.v1.ScanService/AddDentist"
	// ScanServiceDeleteDentistByIdProcedure is the fully-qualified name of the ScanService's
	// DeleteDentistById RPC.
	ScanServiceDeleteDentistByIdProcedure = "/threedoclusion.v1.ScanService/DeleteDentistById"
	// ScanServiceGetAllDentistsProcedure is the fully-qualified name of the ScanService's
	// GetAllDentists RPC.
	ScanServiceGetAllDentistsProcedure = "/threedoclusion.v1.ScanService/GetAllDentists"
	// ScanServiceGetDentistByIdProcedure is the fully-qualified name of the ScanService's
	// GetDentistById RPC.
	ScanServiceGetDentistByIdProcedure = "/threedoclusion.v1.ScanService/GetDentistById"
	// ScanServiceUpdateDentistByIdProcedure is the fully-qualified name of the ScanService's
	// UpdateDentistById RPC.
	ScanServiceUpdateDentistByIdProcedure = "/threedoclusion.v1.ScanService/UpdateDentistById"
	// ScanServiceLoginProcedure is the fully-qualified name of the ScanService's Login RPC.
	ScanServiceLoginProcedure = "/threedoclusion.v1.ScanService/Login"
	// ScanServiceRegisterProcedure is the fully-qualified name of the ScanService's Register RPC.
	ScanServiceRegisterProcedure = "/threedoclusion.v1.ScanService/Register"
)

// ScanServiceClient is a client for the threedoclusion.v1.ScanService service.
type ScanServiceClient interface {
	SendMenuOption(context.Context, *connect_go.Request[v1.SendMenuOptionRequest]) (*connect_go.Response[v1.SendMenuOptionResponse], error)
	ConnectionStatusUpdates(context.Context, *connect_go.Request[v1.ConnectionStatusUpdatesRequest]) (*connect_go.ServerStreamForClient[v1.ConnectionStatusUpdatesResponse], error)
	SendVR(context.Context, *connect_go.Request[v1.SendVRRequest]) (*connect_go.Response[v1.SendVRResponse], error)
	Waiting(context.Context, *connect_go.Request[v1.WaitingRequest]) (*connect_go.ServerStreamForClient[v1.WaitingResponse], error)
	AddScan(context.Context, *connect_go.Request[v1.AddScanRequest]) (*connect_go.Response[v1.AddScanResponse], error)
	DeleteScan(context.Context, *connect_go.Request[v1.DeleteScanRequest]) (*connect_go.Response[v1.DeleteScanResponse], error)
	GetAllScans(context.Context, *connect_go.Request[v1.GetAllScansRequest]) (*connect_go.Response[v1.GetAllScansResponse], error)
	GetScanByID(context.Context, *connect_go.Request[v1.GetScanByIDRequest]) (*connect_go.Response[v1.GetScanByIDResponse], error)
	GetScanByDate(context.Context, *connect_go.Request[v1.GetScanByDateRequest]) (*connect_go.Response[v1.GetScanByDateResponse], error)
	AddTag(context.Context, *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[v1.AddTagResponse], error)
	DeleteTag(context.Context, *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error)
	GetAllTags(context.Context, *connect_go.Request[v1.GetAllTagsRequest]) (*connect_go.Response[v1.GetAllTagsResponse], error)
	GetTagByID(context.Context, *connect_go.Request[v1.GetTagByIDRequest]) (*connect_go.Response[v1.GetTagByIDResponse], error)
	GetAllTagsByType(context.Context, *connect_go.Request[v1.GetAllTagsByTypeRequest]) (*connect_go.Response[v1.GetAllTagsByTypeResponse], error)
	SendPositionScan(context.Context, *connect_go.Request[v1.SendPositionScanRequest]) (*connect_go.Response[v1.SendPositionScanResponse], error)
	GetPositionScan(context.Context, *connect_go.Request[v1.GetPositionScanRequest]) (*connect_go.Response[v1.GetPositionScanResponse], error)
	AddPatient(context.Context, *connect_go.Request[v1.AddPatientRequest]) (*connect_go.Response[v1.AddPatientResponse], error)
	DeletePatient(context.Context, *connect_go.Request[v1.DeletePatientRequest]) (*connect_go.Response[v1.DeletePatientResponse], error)
	GetAllPatients(context.Context, *connect_go.Request[v1.GetAllPatientsRequest]) (*connect_go.Response[v1.GetAllPatientsResponse], error)
	GetPatientByID(context.Context, *connect_go.Request[v1.GetPatientByIDRequest]) (*connect_go.Response[v1.GetPatientByIDResponse], error)
	GetPatientByName(context.Context, *connect_go.Request[v1.GetPatientByNameRequest]) (*connect_go.Response[v1.GetPatientByNameResponse], error)
	AddDentist(context.Context, *connect_go.Request[v1.AddDentistRequest]) (*connect_go.Response[v1.AddDentistResponse], error)
	DeleteDentistById(context.Context, *connect_go.Request[v1.DeleteDentistByIdRequest]) (*connect_go.Response[v1.DeleteDentistByIdResponse], error)
	GetAllDentists(context.Context, *connect_go.Request[v1.GetAllDentistsRequest]) (*connect_go.Response[v1.GetAllDentistsResponse], error)
	GetDentistById(context.Context, *connect_go.Request[v1.GetDentistByIdRequest]) (*connect_go.Response[v1.GetDentistByIdResponse], error)
	UpdateDentistById(context.Context, *connect_go.Request[v1.UpdateDentistByIdRequest]) (*connect_go.Response[v1.UpdateDentistByIdResponse], error)
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
}

// NewScanServiceClient constructs a client for the threedoclusion.v1.ScanService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScanServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ScanServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &scanServiceClient{
		sendMenuOption: connect_go.NewClient[v1.SendMenuOptionRequest, v1.SendMenuOptionResponse](
			httpClient,
			baseURL+ScanServiceSendMenuOptionProcedure,
			opts...,
		),
		connectionStatusUpdates: connect_go.NewClient[v1.ConnectionStatusUpdatesRequest, v1.ConnectionStatusUpdatesResponse](
			httpClient,
			baseURL+ScanServiceConnectionStatusUpdatesProcedure,
			opts...,
		),
		sendVR: connect_go.NewClient[v1.SendVRRequest, v1.SendVRResponse](
			httpClient,
			baseURL+ScanServiceSendVRProcedure,
			opts...,
		),
		waiting: connect_go.NewClient[v1.WaitingRequest, v1.WaitingResponse](
			httpClient,
			baseURL+ScanServiceWaitingProcedure,
			opts...,
		),
		addScan: connect_go.NewClient[v1.AddScanRequest, v1.AddScanResponse](
			httpClient,
			baseURL+ScanServiceAddScanProcedure,
			opts...,
		),
		deleteScan: connect_go.NewClient[v1.DeleteScanRequest, v1.DeleteScanResponse](
			httpClient,
			baseURL+ScanServiceDeleteScanProcedure,
			opts...,
		),
		getAllScans: connect_go.NewClient[v1.GetAllScansRequest, v1.GetAllScansResponse](
			httpClient,
			baseURL+ScanServiceGetAllScansProcedure,
			opts...,
		),
		getScanByID: connect_go.NewClient[v1.GetScanByIDRequest, v1.GetScanByIDResponse](
			httpClient,
			baseURL+ScanServiceGetScanByIDProcedure,
			opts...,
		),
		getScanByDate: connect_go.NewClient[v1.GetScanByDateRequest, v1.GetScanByDateResponse](
			httpClient,
			baseURL+ScanServiceGetScanByDateProcedure,
			opts...,
		),
		addTag: connect_go.NewClient[v1.AddTagRequest, v1.AddTagResponse](
			httpClient,
			baseURL+ScanServiceAddTagProcedure,
			opts...,
		),
		deleteTag: connect_go.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+ScanServiceDeleteTagProcedure,
			opts...,
		),
		getAllTags: connect_go.NewClient[v1.GetAllTagsRequest, v1.GetAllTagsResponse](
			httpClient,
			baseURL+ScanServiceGetAllTagsProcedure,
			opts...,
		),
		getTagByID: connect_go.NewClient[v1.GetTagByIDRequest, v1.GetTagByIDResponse](
			httpClient,
			baseURL+ScanServiceGetTagByIDProcedure,
			opts...,
		),
		getAllTagsByType: connect_go.NewClient[v1.GetAllTagsByTypeRequest, v1.GetAllTagsByTypeResponse](
			httpClient,
			baseURL+ScanServiceGetAllTagsByTypeProcedure,
			opts...,
		),
		sendPositionScan: connect_go.NewClient[v1.SendPositionScanRequest, v1.SendPositionScanResponse](
			httpClient,
			baseURL+ScanServiceSendPositionScanProcedure,
			opts...,
		),
		getPositionScan: connect_go.NewClient[v1.GetPositionScanRequest, v1.GetPositionScanResponse](
			httpClient,
			baseURL+ScanServiceGetPositionScanProcedure,
			opts...,
		),
		addPatient: connect_go.NewClient[v1.AddPatientRequest, v1.AddPatientResponse](
			httpClient,
			baseURL+ScanServiceAddPatientProcedure,
			opts...,
		),
		deletePatient: connect_go.NewClient[v1.DeletePatientRequest, v1.DeletePatientResponse](
			httpClient,
			baseURL+ScanServiceDeletePatientProcedure,
			opts...,
		),
		getAllPatients: connect_go.NewClient[v1.GetAllPatientsRequest, v1.GetAllPatientsResponse](
			httpClient,
			baseURL+ScanServiceGetAllPatientsProcedure,
			opts...,
		),
		getPatientByID: connect_go.NewClient[v1.GetPatientByIDRequest, v1.GetPatientByIDResponse](
			httpClient,
			baseURL+ScanServiceGetPatientByIDProcedure,
			opts...,
		),
		getPatientByName: connect_go.NewClient[v1.GetPatientByNameRequest, v1.GetPatientByNameResponse](
			httpClient,
			baseURL+ScanServiceGetPatientByNameProcedure,
			opts...,
		),
		addDentist: connect_go.NewClient[v1.AddDentistRequest, v1.AddDentistResponse](
			httpClient,
			baseURL+ScanServiceAddDentistProcedure,
			opts...,
		),
		deleteDentistById: connect_go.NewClient[v1.DeleteDentistByIdRequest, v1.DeleteDentistByIdResponse](
			httpClient,
			baseURL+ScanServiceDeleteDentistByIdProcedure,
			opts...,
		),
		getAllDentists: connect_go.NewClient[v1.GetAllDentistsRequest, v1.GetAllDentistsResponse](
			httpClient,
			baseURL+ScanServiceGetAllDentistsProcedure,
			opts...,
		),
		getDentistById: connect_go.NewClient[v1.GetDentistByIdRequest, v1.GetDentistByIdResponse](
			httpClient,
			baseURL+ScanServiceGetDentistByIdProcedure,
			opts...,
		),
		updateDentistById: connect_go.NewClient[v1.UpdateDentistByIdRequest, v1.UpdateDentistByIdResponse](
			httpClient,
			baseURL+ScanServiceUpdateDentistByIdProcedure,
			opts...,
		),
		login: connect_go.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+ScanServiceLoginProcedure,
			opts...,
		),
		register: connect_go.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+ScanServiceRegisterProcedure,
			opts...,
		),
	}
}

// scanServiceClient implements ScanServiceClient.
type scanServiceClient struct {
	sendMenuOption          *connect_go.Client[v1.SendMenuOptionRequest, v1.SendMenuOptionResponse]
	connectionStatusUpdates *connect_go.Client[v1.ConnectionStatusUpdatesRequest, v1.ConnectionStatusUpdatesResponse]
	sendVR                  *connect_go.Client[v1.SendVRRequest, v1.SendVRResponse]
	waiting                 *connect_go.Client[v1.WaitingRequest, v1.WaitingResponse]
	addScan                 *connect_go.Client[v1.AddScanRequest, v1.AddScanResponse]
	deleteScan              *connect_go.Client[v1.DeleteScanRequest, v1.DeleteScanResponse]
	getAllScans             *connect_go.Client[v1.GetAllScansRequest, v1.GetAllScansResponse]
	getScanByID             *connect_go.Client[v1.GetScanByIDRequest, v1.GetScanByIDResponse]
	getScanByDate           *connect_go.Client[v1.GetScanByDateRequest, v1.GetScanByDateResponse]
	addTag                  *connect_go.Client[v1.AddTagRequest, v1.AddTagResponse]
	deleteTag               *connect_go.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
	getAllTags              *connect_go.Client[v1.GetAllTagsRequest, v1.GetAllTagsResponse]
	getTagByID              *connect_go.Client[v1.GetTagByIDRequest, v1.GetTagByIDResponse]
	getAllTagsByType        *connect_go.Client[v1.GetAllTagsByTypeRequest, v1.GetAllTagsByTypeResponse]
	sendPositionScan        *connect_go.Client[v1.SendPositionScanRequest, v1.SendPositionScanResponse]
	getPositionScan         *connect_go.Client[v1.GetPositionScanRequest, v1.GetPositionScanResponse]
	addPatient              *connect_go.Client[v1.AddPatientRequest, v1.AddPatientResponse]
	deletePatient           *connect_go.Client[v1.DeletePatientRequest, v1.DeletePatientResponse]
	getAllPatients          *connect_go.Client[v1.GetAllPatientsRequest, v1.GetAllPatientsResponse]
	getPatientByID          *connect_go.Client[v1.GetPatientByIDRequest, v1.GetPatientByIDResponse]
	getPatientByName        *connect_go.Client[v1.GetPatientByNameRequest, v1.GetPatientByNameResponse]
	addDentist              *connect_go.Client[v1.AddDentistRequest, v1.AddDentistResponse]
	deleteDentistById       *connect_go.Client[v1.DeleteDentistByIdRequest, v1.DeleteDentistByIdResponse]
	getAllDentists          *connect_go.Client[v1.GetAllDentistsRequest, v1.GetAllDentistsResponse]
	getDentistById          *connect_go.Client[v1.GetDentistByIdRequest, v1.GetDentistByIdResponse]
	updateDentistById       *connect_go.Client[v1.UpdateDentistByIdRequest, v1.UpdateDentistByIdResponse]
	login                   *connect_go.Client[v1.LoginRequest, v1.LoginResponse]
	register                *connect_go.Client[v1.RegisterRequest, v1.RegisterResponse]
}

// SendMenuOption calls threedoclusion.v1.ScanService.SendMenuOption.
func (c *scanServiceClient) SendMenuOption(ctx context.Context, req *connect_go.Request[v1.SendMenuOptionRequest]) (*connect_go.Response[v1.SendMenuOptionResponse], error) {
	return c.sendMenuOption.CallUnary(ctx, req)
}

// ConnectionStatusUpdates calls threedoclusion.v1.ScanService.ConnectionStatusUpdates.
func (c *scanServiceClient) ConnectionStatusUpdates(ctx context.Context, req *connect_go.Request[v1.ConnectionStatusUpdatesRequest]) (*connect_go.ServerStreamForClient[v1.ConnectionStatusUpdatesResponse], error) {
	return c.connectionStatusUpdates.CallServerStream(ctx, req)
}

// SendVR calls threedoclusion.v1.ScanService.SendVR.
func (c *scanServiceClient) SendVR(ctx context.Context, req *connect_go.Request[v1.SendVRRequest]) (*connect_go.Response[v1.SendVRResponse], error) {
	return c.sendVR.CallUnary(ctx, req)
}

// Waiting calls threedoclusion.v1.ScanService.Waiting.
func (c *scanServiceClient) Waiting(ctx context.Context, req *connect_go.Request[v1.WaitingRequest]) (*connect_go.ServerStreamForClient[v1.WaitingResponse], error) {
	return c.waiting.CallServerStream(ctx, req)
}

// AddScan calls threedoclusion.v1.ScanService.AddScan.
func (c *scanServiceClient) AddScan(ctx context.Context, req *connect_go.Request[v1.AddScanRequest]) (*connect_go.Response[v1.AddScanResponse], error) {
	return c.addScan.CallUnary(ctx, req)
}

// DeleteScan calls threedoclusion.v1.ScanService.DeleteScan.
func (c *scanServiceClient) DeleteScan(ctx context.Context, req *connect_go.Request[v1.DeleteScanRequest]) (*connect_go.Response[v1.DeleteScanResponse], error) {
	return c.deleteScan.CallUnary(ctx, req)
}

// GetAllScans calls threedoclusion.v1.ScanService.GetAllScans.
func (c *scanServiceClient) GetAllScans(ctx context.Context, req *connect_go.Request[v1.GetAllScansRequest]) (*connect_go.Response[v1.GetAllScansResponse], error) {
	return c.getAllScans.CallUnary(ctx, req)
}

// GetScanByID calls threedoclusion.v1.ScanService.GetScanByID.
func (c *scanServiceClient) GetScanByID(ctx context.Context, req *connect_go.Request[v1.GetScanByIDRequest]) (*connect_go.Response[v1.GetScanByIDResponse], error) {
	return c.getScanByID.CallUnary(ctx, req)
}

// GetScanByDate calls threedoclusion.v1.ScanService.GetScanByDate.
func (c *scanServiceClient) GetScanByDate(ctx context.Context, req *connect_go.Request[v1.GetScanByDateRequest]) (*connect_go.Response[v1.GetScanByDateResponse], error) {
	return c.getScanByDate.CallUnary(ctx, req)
}

// AddTag calls threedoclusion.v1.ScanService.AddTag.
func (c *scanServiceClient) AddTag(ctx context.Context, req *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[v1.AddTagResponse], error) {
	return c.addTag.CallUnary(ctx, req)
}

// DeleteTag calls threedoclusion.v1.ScanService.DeleteTag.
func (c *scanServiceClient) DeleteTag(ctx context.Context, req *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// GetAllTags calls threedoclusion.v1.ScanService.GetAllTags.
func (c *scanServiceClient) GetAllTags(ctx context.Context, req *connect_go.Request[v1.GetAllTagsRequest]) (*connect_go.Response[v1.GetAllTagsResponse], error) {
	return c.getAllTags.CallUnary(ctx, req)
}

// GetTagByID calls threedoclusion.v1.ScanService.GetTagByID.
func (c *scanServiceClient) GetTagByID(ctx context.Context, req *connect_go.Request[v1.GetTagByIDRequest]) (*connect_go.Response[v1.GetTagByIDResponse], error) {
	return c.getTagByID.CallUnary(ctx, req)
}

// GetAllTagsByType calls threedoclusion.v1.ScanService.GetAllTagsByType.
func (c *scanServiceClient) GetAllTagsByType(ctx context.Context, req *connect_go.Request[v1.GetAllTagsByTypeRequest]) (*connect_go.Response[v1.GetAllTagsByTypeResponse], error) {
	return c.getAllTagsByType.CallUnary(ctx, req)
}

// SendPositionScan calls threedoclusion.v1.ScanService.SendPositionScan.
func (c *scanServiceClient) SendPositionScan(ctx context.Context, req *connect_go.Request[v1.SendPositionScanRequest]) (*connect_go.Response[v1.SendPositionScanResponse], error) {
	return c.sendPositionScan.CallUnary(ctx, req)
}

// GetPositionScan calls threedoclusion.v1.ScanService.GetPositionScan.
func (c *scanServiceClient) GetPositionScan(ctx context.Context, req *connect_go.Request[v1.GetPositionScanRequest]) (*connect_go.Response[v1.GetPositionScanResponse], error) {
	return c.getPositionScan.CallUnary(ctx, req)
}

// AddPatient calls threedoclusion.v1.ScanService.AddPatient.
func (c *scanServiceClient) AddPatient(ctx context.Context, req *connect_go.Request[v1.AddPatientRequest]) (*connect_go.Response[v1.AddPatientResponse], error) {
	return c.addPatient.CallUnary(ctx, req)
}

// DeletePatient calls threedoclusion.v1.ScanService.DeletePatient.
func (c *scanServiceClient) DeletePatient(ctx context.Context, req *connect_go.Request[v1.DeletePatientRequest]) (*connect_go.Response[v1.DeletePatientResponse], error) {
	return c.deletePatient.CallUnary(ctx, req)
}

// GetAllPatients calls threedoclusion.v1.ScanService.GetAllPatients.
func (c *scanServiceClient) GetAllPatients(ctx context.Context, req *connect_go.Request[v1.GetAllPatientsRequest]) (*connect_go.Response[v1.GetAllPatientsResponse], error) {
	return c.getAllPatients.CallUnary(ctx, req)
}

// GetPatientByID calls threedoclusion.v1.ScanService.GetPatientByID.
func (c *scanServiceClient) GetPatientByID(ctx context.Context, req *connect_go.Request[v1.GetPatientByIDRequest]) (*connect_go.Response[v1.GetPatientByIDResponse], error) {
	return c.getPatientByID.CallUnary(ctx, req)
}

// GetPatientByName calls threedoclusion.v1.ScanService.GetPatientByName.
func (c *scanServiceClient) GetPatientByName(ctx context.Context, req *connect_go.Request[v1.GetPatientByNameRequest]) (*connect_go.Response[v1.GetPatientByNameResponse], error) {
	return c.getPatientByName.CallUnary(ctx, req)
}

// AddDentist calls threedoclusion.v1.ScanService.AddDentist.
func (c *scanServiceClient) AddDentist(ctx context.Context, req *connect_go.Request[v1.AddDentistRequest]) (*connect_go.Response[v1.AddDentistResponse], error) {
	return c.addDentist.CallUnary(ctx, req)
}

// DeleteDentistById calls threedoclusion.v1.ScanService.DeleteDentistById.
func (c *scanServiceClient) DeleteDentistById(ctx context.Context, req *connect_go.Request[v1.DeleteDentistByIdRequest]) (*connect_go.Response[v1.DeleteDentistByIdResponse], error) {
	return c.deleteDentistById.CallUnary(ctx, req)
}

// GetAllDentists calls threedoclusion.v1.ScanService.GetAllDentists.
func (c *scanServiceClient) GetAllDentists(ctx context.Context, req *connect_go.Request[v1.GetAllDentistsRequest]) (*connect_go.Response[v1.GetAllDentistsResponse], error) {
	return c.getAllDentists.CallUnary(ctx, req)
}

// GetDentistById calls threedoclusion.v1.ScanService.GetDentistById.
func (c *scanServiceClient) GetDentistById(ctx context.Context, req *connect_go.Request[v1.GetDentistByIdRequest]) (*connect_go.Response[v1.GetDentistByIdResponse], error) {
	return c.getDentistById.CallUnary(ctx, req)
}

// UpdateDentistById calls threedoclusion.v1.ScanService.UpdateDentistById.
func (c *scanServiceClient) UpdateDentistById(ctx context.Context, req *connect_go.Request[v1.UpdateDentistByIdRequest]) (*connect_go.Response[v1.UpdateDentistByIdResponse], error) {
	return c.updateDentistById.CallUnary(ctx, req)
}

// Login calls threedoclusion.v1.ScanService.Login.
func (c *scanServiceClient) Login(ctx context.Context, req *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// Register calls threedoclusion.v1.ScanService.Register.
func (c *scanServiceClient) Register(ctx context.Context, req *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// ScanServiceHandler is an implementation of the threedoclusion.v1.ScanService service.
type ScanServiceHandler interface {
	SendMenuOption(context.Context, *connect_go.Request[v1.SendMenuOptionRequest]) (*connect_go.Response[v1.SendMenuOptionResponse], error)
	ConnectionStatusUpdates(context.Context, *connect_go.Request[v1.ConnectionStatusUpdatesRequest], *connect_go.ServerStream[v1.ConnectionStatusUpdatesResponse]) error
	SendVR(context.Context, *connect_go.Request[v1.SendVRRequest]) (*connect_go.Response[v1.SendVRResponse], error)
	Waiting(context.Context, *connect_go.Request[v1.WaitingRequest], *connect_go.ServerStream[v1.WaitingResponse]) error
	AddScan(context.Context, *connect_go.Request[v1.AddScanRequest]) (*connect_go.Response[v1.AddScanResponse], error)
	DeleteScan(context.Context, *connect_go.Request[v1.DeleteScanRequest]) (*connect_go.Response[v1.DeleteScanResponse], error)
	GetAllScans(context.Context, *connect_go.Request[v1.GetAllScansRequest]) (*connect_go.Response[v1.GetAllScansResponse], error)
	GetScanByID(context.Context, *connect_go.Request[v1.GetScanByIDRequest]) (*connect_go.Response[v1.GetScanByIDResponse], error)
	GetScanByDate(context.Context, *connect_go.Request[v1.GetScanByDateRequest]) (*connect_go.Response[v1.GetScanByDateResponse], error)
	AddTag(context.Context, *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[v1.AddTagResponse], error)
	DeleteTag(context.Context, *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error)
	GetAllTags(context.Context, *connect_go.Request[v1.GetAllTagsRequest]) (*connect_go.Response[v1.GetAllTagsResponse], error)
	GetTagByID(context.Context, *connect_go.Request[v1.GetTagByIDRequest]) (*connect_go.Response[v1.GetTagByIDResponse], error)
	GetAllTagsByType(context.Context, *connect_go.Request[v1.GetAllTagsByTypeRequest]) (*connect_go.Response[v1.GetAllTagsByTypeResponse], error)
	SendPositionScan(context.Context, *connect_go.Request[v1.SendPositionScanRequest]) (*connect_go.Response[v1.SendPositionScanResponse], error)
	GetPositionScan(context.Context, *connect_go.Request[v1.GetPositionScanRequest]) (*connect_go.Response[v1.GetPositionScanResponse], error)
	AddPatient(context.Context, *connect_go.Request[v1.AddPatientRequest]) (*connect_go.Response[v1.AddPatientResponse], error)
	DeletePatient(context.Context, *connect_go.Request[v1.DeletePatientRequest]) (*connect_go.Response[v1.DeletePatientResponse], error)
	GetAllPatients(context.Context, *connect_go.Request[v1.GetAllPatientsRequest]) (*connect_go.Response[v1.GetAllPatientsResponse], error)
	GetPatientByID(context.Context, *connect_go.Request[v1.GetPatientByIDRequest]) (*connect_go.Response[v1.GetPatientByIDResponse], error)
	GetPatientByName(context.Context, *connect_go.Request[v1.GetPatientByNameRequest]) (*connect_go.Response[v1.GetPatientByNameResponse], error)
	AddDentist(context.Context, *connect_go.Request[v1.AddDentistRequest]) (*connect_go.Response[v1.AddDentistResponse], error)
	DeleteDentistById(context.Context, *connect_go.Request[v1.DeleteDentistByIdRequest]) (*connect_go.Response[v1.DeleteDentistByIdResponse], error)
	GetAllDentists(context.Context, *connect_go.Request[v1.GetAllDentistsRequest]) (*connect_go.Response[v1.GetAllDentistsResponse], error)
	GetDentistById(context.Context, *connect_go.Request[v1.GetDentistByIdRequest]) (*connect_go.Response[v1.GetDentistByIdResponse], error)
	UpdateDentistById(context.Context, *connect_go.Request[v1.UpdateDentistByIdRequest]) (*connect_go.Response[v1.UpdateDentistByIdResponse], error)
	Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error)
	Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error)
}

// NewScanServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScanServiceHandler(svc ScanServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ScanServiceSendMenuOptionProcedure, connect_go.NewUnaryHandler(
		ScanServiceSendMenuOptionProcedure,
		svc.SendMenuOption,
		opts...,
	))
	mux.Handle(ScanServiceConnectionStatusUpdatesProcedure, connect_go.NewServerStreamHandler(
		ScanServiceConnectionStatusUpdatesProcedure,
		svc.ConnectionStatusUpdates,
		opts...,
	))
	mux.Handle(ScanServiceSendVRProcedure, connect_go.NewUnaryHandler(
		ScanServiceSendVRProcedure,
		svc.SendVR,
		opts...,
	))
	mux.Handle(ScanServiceWaitingProcedure, connect_go.NewServerStreamHandler(
		ScanServiceWaitingProcedure,
		svc.Waiting,
		opts...,
	))
	mux.Handle(ScanServiceAddScanProcedure, connect_go.NewUnaryHandler(
		ScanServiceAddScanProcedure,
		svc.AddScan,
		opts...,
	))
	mux.Handle(ScanServiceDeleteScanProcedure, connect_go.NewUnaryHandler(
		ScanServiceDeleteScanProcedure,
		svc.DeleteScan,
		opts...,
	))
	mux.Handle(ScanServiceGetAllScansProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetAllScansProcedure,
		svc.GetAllScans,
		opts...,
	))
	mux.Handle(ScanServiceGetScanByIDProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetScanByIDProcedure,
		svc.GetScanByID,
		opts...,
	))
	mux.Handle(ScanServiceGetScanByDateProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetScanByDateProcedure,
		svc.GetScanByDate,
		opts...,
	))
	mux.Handle(ScanServiceAddTagProcedure, connect_go.NewUnaryHandler(
		ScanServiceAddTagProcedure,
		svc.AddTag,
		opts...,
	))
	mux.Handle(ScanServiceDeleteTagProcedure, connect_go.NewUnaryHandler(
		ScanServiceDeleteTagProcedure,
		svc.DeleteTag,
		opts...,
	))
	mux.Handle(ScanServiceGetAllTagsProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetAllTagsProcedure,
		svc.GetAllTags,
		opts...,
	))
	mux.Handle(ScanServiceGetTagByIDProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetTagByIDProcedure,
		svc.GetTagByID,
		opts...,
	))
	mux.Handle(ScanServiceGetAllTagsByTypeProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetAllTagsByTypeProcedure,
		svc.GetAllTagsByType,
		opts...,
	))
	mux.Handle(ScanServiceSendPositionScanProcedure, connect_go.NewUnaryHandler(
		ScanServiceSendPositionScanProcedure,
		svc.SendPositionScan,
		opts...,
	))
	mux.Handle(ScanServiceGetPositionScanProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetPositionScanProcedure,
		svc.GetPositionScan,
		opts...,
	))
	mux.Handle(ScanServiceAddPatientProcedure, connect_go.NewUnaryHandler(
		ScanServiceAddPatientProcedure,
		svc.AddPatient,
		opts...,
	))
	mux.Handle(ScanServiceDeletePatientProcedure, connect_go.NewUnaryHandler(
		ScanServiceDeletePatientProcedure,
		svc.DeletePatient,
		opts...,
	))
	mux.Handle(ScanServiceGetAllPatientsProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetAllPatientsProcedure,
		svc.GetAllPatients,
		opts...,
	))
	mux.Handle(ScanServiceGetPatientByIDProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetPatientByIDProcedure,
		svc.GetPatientByID,
		opts...,
	))
	mux.Handle(ScanServiceGetPatientByNameProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetPatientByNameProcedure,
		svc.GetPatientByName,
		opts...,
	))
	mux.Handle(ScanServiceAddDentistProcedure, connect_go.NewUnaryHandler(
		ScanServiceAddDentistProcedure,
		svc.AddDentist,
		opts...,
	))
	mux.Handle(ScanServiceDeleteDentistByIdProcedure, connect_go.NewUnaryHandler(
		ScanServiceDeleteDentistByIdProcedure,
		svc.DeleteDentistById,
		opts...,
	))
	mux.Handle(ScanServiceGetAllDentistsProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetAllDentistsProcedure,
		svc.GetAllDentists,
		opts...,
	))
	mux.Handle(ScanServiceGetDentistByIdProcedure, connect_go.NewUnaryHandler(
		ScanServiceGetDentistByIdProcedure,
		svc.GetDentistById,
		opts...,
	))
	mux.Handle(ScanServiceUpdateDentistByIdProcedure, connect_go.NewUnaryHandler(
		ScanServiceUpdateDentistByIdProcedure,
		svc.UpdateDentistById,
		opts...,
	))
	mux.Handle(ScanServiceLoginProcedure, connect_go.NewUnaryHandler(
		ScanServiceLoginProcedure,
		svc.Login,
		opts...,
	))
	mux.Handle(ScanServiceRegisterProcedure, connect_go.NewUnaryHandler(
		ScanServiceRegisterProcedure,
		svc.Register,
		opts...,
	))
	return "/threedoclusion.v1.ScanService/", mux
}

// UnimplementedScanServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScanServiceHandler struct{}

func (UnimplementedScanServiceHandler) SendMenuOption(context.Context, *connect_go.Request[v1.SendMenuOptionRequest]) (*connect_go.Response[v1.SendMenuOptionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.SendMenuOption is not implemented"))
}

func (UnimplementedScanServiceHandler) ConnectionStatusUpdates(context.Context, *connect_go.Request[v1.ConnectionStatusUpdatesRequest], *connect_go.ServerStream[v1.ConnectionStatusUpdatesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.ConnectionStatusUpdates is not implemented"))
}

func (UnimplementedScanServiceHandler) SendVR(context.Context, *connect_go.Request[v1.SendVRRequest]) (*connect_go.Response[v1.SendVRResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.SendVR is not implemented"))
}

func (UnimplementedScanServiceHandler) Waiting(context.Context, *connect_go.Request[v1.WaitingRequest], *connect_go.ServerStream[v1.WaitingResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.Waiting is not implemented"))
}

func (UnimplementedScanServiceHandler) AddScan(context.Context, *connect_go.Request[v1.AddScanRequest]) (*connect_go.Response[v1.AddScanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.AddScan is not implemented"))
}

func (UnimplementedScanServiceHandler) DeleteScan(context.Context, *connect_go.Request[v1.DeleteScanRequest]) (*connect_go.Response[v1.DeleteScanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.DeleteScan is not implemented"))
}

func (UnimplementedScanServiceHandler) GetAllScans(context.Context, *connect_go.Request[v1.GetAllScansRequest]) (*connect_go.Response[v1.GetAllScansResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetAllScans is not implemented"))
}

func (UnimplementedScanServiceHandler) GetScanByID(context.Context, *connect_go.Request[v1.GetScanByIDRequest]) (*connect_go.Response[v1.GetScanByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetScanByID is not implemented"))
}

func (UnimplementedScanServiceHandler) GetScanByDate(context.Context, *connect_go.Request[v1.GetScanByDateRequest]) (*connect_go.Response[v1.GetScanByDateResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetScanByDate is not implemented"))
}

func (UnimplementedScanServiceHandler) AddTag(context.Context, *connect_go.Request[v1.AddTagRequest]) (*connect_go.Response[v1.AddTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.AddTag is not implemented"))
}

func (UnimplementedScanServiceHandler) DeleteTag(context.Context, *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.DeleteTag is not implemented"))
}

func (UnimplementedScanServiceHandler) GetAllTags(context.Context, *connect_go.Request[v1.GetAllTagsRequest]) (*connect_go.Response[v1.GetAllTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetAllTags is not implemented"))
}

func (UnimplementedScanServiceHandler) GetTagByID(context.Context, *connect_go.Request[v1.GetTagByIDRequest]) (*connect_go.Response[v1.GetTagByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetTagByID is not implemented"))
}

func (UnimplementedScanServiceHandler) GetAllTagsByType(context.Context, *connect_go.Request[v1.GetAllTagsByTypeRequest]) (*connect_go.Response[v1.GetAllTagsByTypeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetAllTagsByType is not implemented"))
}

func (UnimplementedScanServiceHandler) SendPositionScan(context.Context, *connect_go.Request[v1.SendPositionScanRequest]) (*connect_go.Response[v1.SendPositionScanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.SendPositionScan is not implemented"))
}

func (UnimplementedScanServiceHandler) GetPositionScan(context.Context, *connect_go.Request[v1.GetPositionScanRequest]) (*connect_go.Response[v1.GetPositionScanResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetPositionScan is not implemented"))
}

func (UnimplementedScanServiceHandler) AddPatient(context.Context, *connect_go.Request[v1.AddPatientRequest]) (*connect_go.Response[v1.AddPatientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.AddPatient is not implemented"))
}

func (UnimplementedScanServiceHandler) DeletePatient(context.Context, *connect_go.Request[v1.DeletePatientRequest]) (*connect_go.Response[v1.DeletePatientResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.DeletePatient is not implemented"))
}

func (UnimplementedScanServiceHandler) GetAllPatients(context.Context, *connect_go.Request[v1.GetAllPatientsRequest]) (*connect_go.Response[v1.GetAllPatientsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetAllPatients is not implemented"))
}

func (UnimplementedScanServiceHandler) GetPatientByID(context.Context, *connect_go.Request[v1.GetPatientByIDRequest]) (*connect_go.Response[v1.GetPatientByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetPatientByID is not implemented"))
}

func (UnimplementedScanServiceHandler) GetPatientByName(context.Context, *connect_go.Request[v1.GetPatientByNameRequest]) (*connect_go.Response[v1.GetPatientByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetPatientByName is not implemented"))
}

func (UnimplementedScanServiceHandler) AddDentist(context.Context, *connect_go.Request[v1.AddDentistRequest]) (*connect_go.Response[v1.AddDentistResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.AddDentist is not implemented"))
}

func (UnimplementedScanServiceHandler) DeleteDentistById(context.Context, *connect_go.Request[v1.DeleteDentistByIdRequest]) (*connect_go.Response[v1.DeleteDentistByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.DeleteDentistById is not implemented"))
}

func (UnimplementedScanServiceHandler) GetAllDentists(context.Context, *connect_go.Request[v1.GetAllDentistsRequest]) (*connect_go.Response[v1.GetAllDentistsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetAllDentists is not implemented"))
}

func (UnimplementedScanServiceHandler) GetDentistById(context.Context, *connect_go.Request[v1.GetDentistByIdRequest]) (*connect_go.Response[v1.GetDentistByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.GetDentistById is not implemented"))
}

func (UnimplementedScanServiceHandler) UpdateDentistById(context.Context, *connect_go.Request[v1.UpdateDentistByIdRequest]) (*connect_go.Response[v1.UpdateDentistByIdResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.UpdateDentistById is not implemented"))
}

func (UnimplementedScanServiceHandler) Login(context.Context, *connect_go.Request[v1.LoginRequest]) (*connect_go.Response[v1.LoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.Login is not implemented"))
}

func (UnimplementedScanServiceHandler) Register(context.Context, *connect_go.Request[v1.RegisterRequest]) (*connect_go.Response[v1.RegisterResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("threedoclusion.v1.ScanService.Register is not implemented"))
}
