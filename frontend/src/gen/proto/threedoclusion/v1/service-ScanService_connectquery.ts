// @generated by protoc-gen-connect-query v0.1.1 with parameter "target=ts"
// @generated from file threedoclusion/v1/service.proto (package threedoclusion.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { createQueryService } from "@bufbuild/connect-query";
import { MethodKind } from "@bufbuild/protobuf";
import { AddDentistRequest, AddDentistResponse, AddScanRequest, AddScanResponse, AddTagRequest, AddTagResponse, DeleteDentistByIdRequest, DeleteDentistByIdResponse, DeleteScanRequest, DeleteScanResponse, DeleteTagRequest, DeleteTagResponse, GetAllDentistsRequest, GetAllDentistsResponse, GetAllScansRequest, GetAllScansResponse, GetAllTagsByTypeRequest, GetAllTagsByTypeResponse, GetAllTagsRequest, GetAllTagsResponse, GetDentistByIdRequest, GetDentistByIdResponse, GetScanByDateRequest, GetScanByDateResponse, GetScanByIDRequest, GetScanByIDResponse, GetTagByIDRequest, GetTagByIDResponse, LoginRequest, LoginResponse, RegisterRequest, RegisterResponse, UpdateDentistByIdRequest, UpdateDentistByIdResponse } from "./service_pb.js";

export const typeName = "threedoclusion.v1.ScanService";

/**
 * @generated from rpc threedoclusion.v1.ScanService.AddScan
 */
export const addScan = createQueryService({
  service: {
    methods: {
      addScan: {
        name: "AddScan",
        kind: MethodKind.Unary,
        I: AddScanRequest,
        O: AddScanResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).addScan;

/**
 * @generated from rpc threedoclusion.v1.ScanService.DeleteScan
 */
export const deleteScan = createQueryService({
  service: {
    methods: {
      deleteScan: {
        name: "DeleteScan",
        kind: MethodKind.Unary,
        I: DeleteScanRequest,
        O: DeleteScanResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).deleteScan;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetAllScans
 */
export const getAllScans = createQueryService({
  service: {
    methods: {
      getAllScans: {
        name: "GetAllScans",
        kind: MethodKind.Unary,
        I: GetAllScansRequest,
        O: GetAllScansResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getAllScans;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetScanByID
 */
export const getScanByID = createQueryService({
  service: {
    methods: {
      getScanByID: {
        name: "GetScanByID",
        kind: MethodKind.Unary,
        I: GetScanByIDRequest,
        O: GetScanByIDResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getScanByID;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetScanByDate
 */
export const getScanByDate = createQueryService({
  service: {
    methods: {
      getScanByDate: {
        name: "GetScanByDate",
        kind: MethodKind.Unary,
        I: GetScanByDateRequest,
        O: GetScanByDateResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getScanByDate;

/**
 * @generated from rpc threedoclusion.v1.ScanService.AddTag
 */
export const addTag = createQueryService({
  service: {
    methods: {
      addTag: {
        name: "AddTag",
        kind: MethodKind.Unary,
        I: AddTagRequest,
        O: AddTagResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).addTag;

/**
 * @generated from rpc threedoclusion.v1.ScanService.DeleteTag
 */
export const deleteTag = createQueryService({
  service: {
    methods: {
      deleteTag: {
        name: "DeleteTag",
        kind: MethodKind.Unary,
        I: DeleteTagRequest,
        O: DeleteTagResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).deleteTag;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetAllTags
 */
export const getAllTags = createQueryService({
  service: {
    methods: {
      getAllTags: {
        name: "GetAllTags",
        kind: MethodKind.Unary,
        I: GetAllTagsRequest,
        O: GetAllTagsResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getAllTags;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetTagByID
 */
export const getTagByID = createQueryService({
  service: {
    methods: {
      getTagByID: {
        name: "GetTagByID",
        kind: MethodKind.Unary,
        I: GetTagByIDRequest,
        O: GetTagByIDResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getTagByID;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetAllTagsByType
 */
export const getAllTagsByType = createQueryService({
  service: {
    methods: {
      getAllTagsByType: {
        name: "GetAllTagsByType",
        kind: MethodKind.Unary,
        I: GetAllTagsByTypeRequest,
        O: GetAllTagsByTypeResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getAllTagsByType;

/**
 * @generated from rpc threedoclusion.v1.ScanService.AddDentist
 */
export const addDentist = createQueryService({
  service: {
    methods: {
      addDentist: {
        name: "AddDentist",
        kind: MethodKind.Unary,
        I: AddDentistRequest,
        O: AddDentistResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).addDentist;

/**
 * @generated from rpc threedoclusion.v1.ScanService.DeleteDentistById
 */
export const deleteDentistById = createQueryService({
  service: {
    methods: {
      deleteDentistById: {
        name: "DeleteDentistById",
        kind: MethodKind.Unary,
        I: DeleteDentistByIdRequest,
        O: DeleteDentistByIdResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).deleteDentistById;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetAllDentists
 */
export const getAllDentists = createQueryService({
  service: {
    methods: {
      getAllDentists: {
        name: "GetAllDentists",
        kind: MethodKind.Unary,
        I: GetAllDentistsRequest,
        O: GetAllDentistsResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getAllDentists;

/**
 * @generated from rpc threedoclusion.v1.ScanService.GetDentistById
 */
export const getDentistById = createQueryService({
  service: {
    methods: {
      getDentistById: {
        name: "GetDentistById",
        kind: MethodKind.Unary,
        I: GetDentistByIdRequest,
        O: GetDentistByIdResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).getDentistById;

/**
 * @generated from rpc threedoclusion.v1.ScanService.UpdateDentistById
 */
export const updateDentistById = createQueryService({
  service: {
    methods: {
      updateDentistById: {
        name: "UpdateDentistById",
        kind: MethodKind.Unary,
        I: UpdateDentistByIdRequest,
        O: UpdateDentistByIdResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).updateDentistById;

/**
 * @generated from rpc threedoclusion.v1.ScanService.Login
 */
export const login = createQueryService({
  service: {
    methods: {
      login: {
        name: "Login",
        kind: MethodKind.Unary,
        I: LoginRequest,
        O: LoginResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).login;

/**
 * @generated from rpc threedoclusion.v1.ScanService.Register
 */
export const register = createQueryService({
  service: {
    methods: {
      register: {
        name: "Register",
        kind: MethodKind.Unary,
        I: RegisterRequest,
        O: RegisterResponse,
      },
    },
    typeName: "threedoclusion.v1.ScanService",
  },
}).register;
