#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// scripts/platform.ts
var os = __toESM(require("os"));
var knownWindowsPackages = {
  "win32 arm64 LE": "@bufbuild/buf-win32-arm64",
  "win32 x64 LE": "@bufbuild/buf-win32-x64"
};
var knownUnixlikePackages = {
  "darwin arm64 LE": "@bufbuild/buf-darwin-arm64",
  "darwin x64 LE": "@bufbuild/buf-darwin-x64",
  "linux arm64 LE": "@bufbuild/buf-linux-aarch64",
  "linux x64 LE": "@bufbuild/buf-linux-x64"
};
function pkgAndSubpathForCurrentPlatform(binKey = "buf") {
  let pkg;
  let subpath;
  let platformKey = `${process.platform} ${os.arch()} ${os.endianness()}`;
  if (platformKey in knownWindowsPackages) {
    pkg = knownWindowsPackages[platformKey];
    subpath = `bin/${binKey}.exe`;
  } else if (platformKey in knownUnixlikePackages) {
    pkg = knownUnixlikePackages[platformKey];
    subpath = `bin/${binKey}`;
  } else {
    throw new Error(`Unsupported platform: ${platformKey}`);
  }
  return { pkg, subpath };
}
function generateBinPath(binKey) {
  const { pkg, subpath } = pkgAndSubpathForCurrentPlatform(binKey);
  return {
    binPath: require.resolve(`${pkg}/${subpath}`)
  };
}

// scripts/bin.ts
var import_child_process = require("child_process");
var { binPath } = generateBinPath("protoc-gen-buf-breaking");
var child = (0, import_child_process.spawnSync)(binPath, process.argv.slice(2), {
  stdio: "inherit"
});
if (child.error) {
  throw child.error;
}
var _a;
process.exit((_a = child.status) != null ? _a : 1);
