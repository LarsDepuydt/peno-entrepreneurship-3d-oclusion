import { localName } from "./private/names.js";
import { getUnwrappedFieldType } from "./private/field-wrapper.js";
import { scalarDefaultValue } from "./private/scalars.js";
import { reifyWkt } from "./private/reify-wkt.js";
interface CodegenInfo {
    readonly packageName: string;
    readonly localName: typeof localName;
    readonly symbols: Record<RuntimeSymbolName, RuntimeSymbolInfo>;
    readonly getUnwrappedFieldType: typeof getUnwrappedFieldType;
    readonly wktSourceFiles: readonly string[];
    readonly scalarDefaultValue: typeof scalarDefaultValue;
    readonly reifyWkt: typeof reifyWkt;
}
type RuntimeSymbolName = "proto2" | "proto3" | "Message" | "PartialMessage" | "PlainMessage" | "FieldList" | "MessageType" | "BinaryReadOptions" | "BinaryWriteOptions" | "JsonReadOptions" | "JsonWriteOptions" | "JsonValue" | "JsonObject" | "protoInt64" | "ScalarType" | "MethodKind" | "MethodIdempotency" | "IMessageTypeRegistry";
type RuntimeSymbolInfo = {
    typeOnly: boolean;
    publicImportPath: string;
    privateImportPath: string;
};
export declare const codegenInfo: CodegenInfo;
export {};
