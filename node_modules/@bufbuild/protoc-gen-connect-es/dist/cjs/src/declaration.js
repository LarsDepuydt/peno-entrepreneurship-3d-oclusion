"use strict";
// Copyright 2021-2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDts = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const ecmascript_1 = require("@bufbuild/protoplugin/ecmascript");
function generateDts(schema) {
    for (const protoFile of schema.files) {
        if (protoFile.services.length == 0) {
            continue;
        }
        const file = schema.generateFile(protoFile.name + "_connect.d.ts");
        file.preamble(protoFile);
        for (const service of protoFile.services) {
            generateService(schema, file, service);
        }
    }
}
exports.generateDts = generateDts;
// prettier-ignore
function generateService(schema, f, service) {
    const { MethodKind: rtMethodKind, MethodIdempotency: rtMethodIdempotency } = schema.runtime;
    f.print((0, ecmascript_1.makeJsDoc)(service));
    f.print("export declare const ", (0, ecmascript_1.localName)(service), ": {");
    f.print(`  readonly typeName: `, (0, ecmascript_1.literalString)(service.typeName), `,`);
    f.print("  readonly methods: {");
    for (const method of service.methods) {
        f.print((0, ecmascript_1.makeJsDoc)(method, "    "));
        f.print("    readonly ", (0, ecmascript_1.localName)(method), ": {");
        f.print(`      readonly name: `, (0, ecmascript_1.literalString)(method.name), `,`);
        f.print("      readonly I: typeof ", method.input, ",");
        f.print("      readonly O: typeof ", method.output, ",");
        f.print("      readonly kind: ", rtMethodKind, ".", protobuf_1.MethodKind[method.methodKind], ",");
        if (method.idempotency !== undefined) {
            f.print("      readonly idempotency: ", rtMethodIdempotency, ".", protobuf_1.MethodIdempotency[method.idempotency], ",");
        }
        // In case we start supporting options, we have to surface them here
        f.print("    },");
    }
    f.print("  }");
    f.print("};");
    f.print();
}
