import { Schema } from "./ecmascript/schema.js";
import type { FileInfo } from "./ecmascript/generated-file.js";
import type { Plugin } from "./plugin.js";
interface PluginInit {
    /**
     * Name of this code generator plugin.
     */
    name: string;
    /**
     * Version of this code generator plugin.
     */
    version: string;
    /**
     * A optional parsing function which can be used to customize parameter
     * parsing of the plugin.
     */
    parseOption?: PluginOptionParseFn;
    /**
     * A function which will generate TypeScript files based on proto input.
     * This function will be invoked by the plugin framework when the plugin runs.
     *
     * Note that this is required to be provided for plugin initialization.
     */
    generateTs: (schema: Schema, target: "ts") => void;
    /**
     * A optional function which will generate JavaScript files based on proto
     * input.  This function will be invoked by the  plugin framework when the
     * plugin runs.
     *
     * If this function is not provided, the plugin framework will then check if
     * a transpile function is provided.  If so, it will be invoked to transpile
     * JavaScript files.  If not, the plugin framework will transpile the files
     * itself.
     */
    generateJs?: (schema: Schema, target: "js") => void;
    /**
     * A optional function which will generate TypeScript declaration files
     * based on proto input.  This function will be invoked by the plugin
     * framework when the plugin runs.
     *
     * If this function is not provided, the plugin framework will then check if
     * a transpile function is provided.  If so, it will be invoked to transpile
     * declaration files.  If not, the plugin framework will transpile the files
     * itself.
     */
    generateDts?: (schema: Schema, target: "dts") => void;
    /**
     * A optional function which will transpile a given set of files.
     *
     * This funcion is meant to be used in place of either generateJs,
     * generateDts, or both.  However, those functions will take precedence.
     * This means that if generateJs, generateDts, and this transpile function
     * are all provided, this transpile function will be ignored.
     */
    transpile?: (files: FileInfo[], transpileJs: boolean, transpileDts: boolean) => FileInfo[];
}
type PluginOptionParseFn = (key: string, value: string | undefined) => void;
/**
 * Create a new code generator plugin for ECMAScript.
 * The plugin can generate JavaScript, TypeScript, or TypeScript declaration
 * files.
 */
export declare function createEcmaScriptPlugin(init: PluginInit): Plugin;
export {};
