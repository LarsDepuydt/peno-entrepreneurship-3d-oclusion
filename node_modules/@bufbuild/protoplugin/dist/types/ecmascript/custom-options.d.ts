import type { AnyDesc } from "@bufbuild/protobuf";
import { Message, MessageType, ScalarType } from "@bufbuild/protobuf";
/**
 * Returns the value of a custom option with a scalar type.
 *
 * If no option is found, returns undefined.
 */
export declare function findCustomScalarOption<T extends ScalarType>(desc: AnyDesc, extensionNumber: number, scalarType: T): ScalarValue<T> | undefined;
/**
 * Returns the value of a custom message option for the given descriptor and
 * extension number.
 * The msgType param is then used to deserialize the message for returning to
 * the caller.
 *
 * If no options are found, returns undefined.
 *
 * If the message option is unable to be read or deserialized, an error will
 * be thrown.
 */
export declare function findCustomMessageOption<T extends Message<T>>(desc: AnyDesc, extensionNumber: number, msgType: MessageType<T>): T | undefined;
/**
 * Returns the value of a custom enum option for the given descriptor and
 * extension number.
 *
 * If no options are found, returns undefined.
 */
export declare function findCustomEnumOption(desc: AnyDesc, extensionNumber: number): number | undefined;
/**
 * ScalarValue is a conditional type that pairs a ScalarType value with its concrete type.
 */
type ScalarValue<T> = T extends ScalarType.STRING ? string : T extends ScalarType.INT32 ? number : T extends ScalarType.UINT32 ? number : T extends ScalarType.UINT32 ? number : T extends ScalarType.SINT32 ? number : T extends ScalarType.FIXED32 ? number : T extends ScalarType.SFIXED32 ? number : T extends ScalarType.FLOAT ? number : T extends ScalarType.DOUBLE ? number : T extends ScalarType.INT64 ? bigint | string : T extends ScalarType.SINT64 ? bigint | string : T extends ScalarType.SFIXED64 ? bigint | string : T extends ScalarType.UINT64 ? bigint | string : T extends ScalarType.FIXED64 ? bigint | string : T extends ScalarType.BOOL ? boolean : T extends ScalarType.BYTES ? Uint8Array : never;
export {};
