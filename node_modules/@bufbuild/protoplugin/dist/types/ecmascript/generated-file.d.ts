import type { DescEnum, DescFile, DescMessage } from "@bufbuild/protobuf";
import type { ImportSymbol } from "./import-symbol.js";
import type { RuntimeImports } from "./runtime-imports.js";
/**
 * All types that can be passed to GeneratedFile.print()
 */
export type Printable = string | number | boolean | bigint | Uint8Array | ImportSymbol | DescMessage | DescEnum | Printable[];
/**
 * FileInfo represents an intermediate type using for transpiling TypeScript internally.
 */
export interface FileInfo {
    name: string;
    content: string;
    preamble?: string | undefined;
}
/**
 * Represents a JavaScript, TypeScript, or TypeScript declaration file.
 */
export interface GeneratedFile {
    /**
     * Create a standard preamble the includes comments at the top of the
     * protobuf source file (like a license header), as well as information
     * about the code generator and its version.
     *
     * The preamble is always placed at the very top of the generated file,
     * above import statements.
     */
    preamble(file: DescFile): void;
    /**
     * Add a line of code to the file.
     *
     * - string: Prints the string verbatim.
     * - number or boolean: Prints a literal.
     * - bigint: Prints an expression using protoInt64.parse().
     * - Uint8Array: Prints an expression that re-created the array.
     * - ImportSymbol: Adds an import statement and prints the name of the symbol.
     * - DescMessage or DescEnum: Imports the type if necessary, and prints the name.
     */
    print(...printables: Printable[]): void;
    /**
     * Add a line of code to the file with tagged template literal and
     * an optional array of Printables.
     * See print(Printable[]) for behavior when printing Printable items.
     */
    print(fragments: TemplateStringsArray, ...printables: Printable[]): void;
    /**
     * Reserves an identifier in this file.
     */
    export(name: string): ImportSymbol;
    /**
     * Import a message or enumeration generated by protoc-gen-es.
     */
    import(type: DescMessage | DescEnum): ImportSymbol;
    /**
     * Import any symbol from a file or package.
     *
     * The import path can point to a package, for example `@foo/bar/baz.js`, or
     * to a file, for example `./bar/baz.js`.
     *
     * Note that while paths to a file begin with a `./`, they must be
     * relative to the project root. The import path is automatically made
     * relative to the current file.
     */
    import(name: string, from: string): ImportSymbol;
}
export interface GenerateFileToFileInfo {
    getFileInfo(): FileInfo | undefined;
}
type CreateTypeImportFn = (desc: DescMessage | DescEnum) => ImportSymbol;
type RewriteImportPathFn = (path: string) => string;
export declare function createGeneratedFile(name: string, importPath: string, rewriteImportPath: RewriteImportPathFn, createTypeImport: CreateTypeImportFn, runtimeImports: RuntimeImports, preambleSettings: {
    pluginName: string;
    pluginVersion: string;
    pluginParameter: string;
    tsNocheck: boolean;
}, keepEmpty: boolean): GeneratedFile & GenerateFileToFileInfo;
export {};
